// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod component {
    pub mod bug_report {
      
      #[allow(clippy::all)]
      pub mod resource1_interface {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        
        pub use super::super::super::super::super::Resource1 as Resource1;
        const _: () = {
          #[doc(hidden)]
          #[export_name = "component:bug-report/resource1-interface#[dtor]resource1"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: usize) {
            wit_bindgen::rt::Resource::<Resource1>::dtor(rep)
          }
        };
        unsafe impl wit_bindgen::rt::RustResource for Resource1{
          unsafe fn new(_rep: usize) -> u32 {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:bug-report/resource1-interface")]
              extern "C" {
                #[link_name = "[resource-new]resource1"]
                fn new(_: usize) -> u32;
              }
              new(_rep)
            }
          }
          
          unsafe fn rep(_handle: u32) -> usize {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:bug-report/resource1-interface")]
              extern "C" {
                #[link_name = "[resource-rep]resource1"]
                fn rep(_: u32) -> usize;
              }
              rep(_handle)
            }
          }
        }
        pub type OwnResource1 = wit_bindgen::rt::Resource<Resource1>;
        
        
        unsafe impl wit_bindgen::rt::WasmResource for Resource1{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:bug-report/resource1-interface")]
              extern "C" {
                #[link_name = "[resource-drop]resource1"]
                fn drop(_: u32);
              }
              
              drop(_handle);
            }
          }
        }
        
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:bug-report/resource1-interface#create"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_create() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::create();
            wit_bindgen::rt::Resource::into_handle(result0) as i32
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn create() -> OwnResource1;
        }
        
      }
      
      
      #[allow(clippy::all)]
      pub mod resource2_interface {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type OwnResource1 = super::super::super::super::exports::component::bug_report::resource1_interface::OwnResource1;
        pub type Resource1 = super::super::super::super::exports::component::bug_report::resource1_interface::Resource1;
        
        pub use super::super::super::super::super::Resource2 as Resource2;
        const _: () = {
          #[doc(hidden)]
          #[export_name = "component:bug-report/resource2-interface#[dtor]resource2"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: usize) {
            wit_bindgen::rt::Resource::<Resource2>::dtor(rep)
          }
        };
        unsafe impl wit_bindgen::rt::RustResource for Resource2{
          unsafe fn new(_rep: usize) -> u32 {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:bug-report/resource2-interface")]
              extern "C" {
                #[link_name = "[resource-new]resource2"]
                fn new(_: usize) -> u32;
              }
              new(_rep)
            }
          }
          
          unsafe fn rep(_handle: u32) -> usize {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:bug-report/resource2-interface")]
              extern "C" {
                #[link_name = "[resource-rep]resource2"]
                fn rep(_: u32) -> usize;
              }
              rep(_handle)
            }
          }
        }
        pub type OwnResource2 = wit_bindgen::rt::Resource<Resource2>;
        
        
        unsafe impl wit_bindgen::rt::WasmResource for Resource2{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:bug-report/resource2-interface")]
              extern "C" {
                #[link_name = "[resource-drop]resource2"]
                fn drop(_: u32);
              }
              
              drop(_handle);
            }
          }
        }
        
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:bug-report/resource2-interface#create-resource2"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_create_resource2(arg0: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::create_resource2(super::super::super::super::exports::component::bug_report::resource1_interface::OwnResource1::from_handle(arg0 as u32));
            wit_bindgen::rt::Resource::into_handle(result0) as i32
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:bug-report/resource2-interface#do-stuff"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_do_stuff(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::do_stuff(super::super::super::super::exports::component::bug_report::resource1_interface::OwnResource1::from_handle(arg0 as u32), OwnResource2::from_handle(arg1 as u32));
            wit_bindgen::rt::Resource::into_handle(result0) as i32
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn create_resource2(resource1: OwnResource1,) -> OwnResource2;
          fn do_stuff(resource1: OwnResource1,resource2: OwnResource2,) -> OwnResource2;
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:example"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 812] = [3, 0, 7, 101, 120, 97, 109, 112, 108, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 84, 1, 65, 2, 1, 66, 4, 4, 0, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 3, 1, 1, 105, 0, 1, 64, 0, 0, 1, 4, 0, 6, 99, 114, 101, 97, 116, 101, 1, 2, 4, 1, 40, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 98, 117, 103, 45, 114, 101, 112, 111, 114, 116, 47, 114, 101, 115, 111, 117, 114, 99, 101, 49, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 5, 0, 11, 25, 1, 0, 19, 114, 101, 115, 111, 117, 114, 99, 101, 49, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 3, 0, 0, 7, 244, 1, 1, 65, 5, 1, 66, 1, 4, 0, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 3, 1, 3, 1, 40, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 98, 117, 103, 45, 114, 101, 112, 111, 114, 116, 47, 114, 101, 115, 111, 117, 114, 99, 101, 49, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 5, 0, 2, 3, 0, 0, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 1, 66, 9, 2, 3, 2, 1, 1, 4, 0, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 3, 0, 0, 4, 0, 9, 114, 101, 115, 111, 117, 114, 99, 101, 50, 3, 1, 1, 105, 1, 1, 105, 2, 1, 64, 1, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 3, 0, 4, 4, 0, 16, 99, 114, 101, 97, 116, 101, 45, 114, 101, 115, 111, 117, 114, 99, 101, 50, 1, 5, 1, 64, 2, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 3, 9, 114, 101, 115, 111, 117, 114, 99, 101, 50, 4, 0, 4, 4, 0, 8, 100, 111, 45, 115, 116, 117, 102, 102, 1, 6, 4, 1, 40, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 98, 117, 103, 45, 114, 101, 112, 111, 114, 116, 47, 114, 101, 115, 111, 117, 114, 99, 101, 50, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 5, 2, 11, 25, 1, 0, 19, 114, 101, 115, 111, 117, 114, 99, 101, 50, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 3, 2, 0, 7, 171, 2, 1, 65, 2, 1, 65, 5, 1, 66, 4, 4, 0, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 3, 1, 1, 105, 0, 1, 64, 0, 0, 1, 4, 0, 6, 99, 114, 101, 97, 116, 101, 1, 2, 4, 1, 40, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 98, 117, 103, 45, 114, 101, 112, 111, 114, 116, 47, 114, 101, 115, 111, 117, 114, 99, 101, 49, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 5, 0, 2, 3, 0, 0, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 1, 66, 9, 2, 3, 2, 1, 1, 4, 0, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 3, 0, 0, 4, 0, 9, 114, 101, 115, 111, 117, 114, 99, 101, 50, 3, 1, 1, 105, 1, 1, 105, 2, 1, 64, 1, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 3, 0, 4, 4, 0, 16, 99, 114, 101, 97, 116, 101, 45, 114, 101, 115, 111, 117, 114, 99, 101, 50, 1, 5, 1, 64, 2, 9, 114, 101, 115, 111, 117, 114, 99, 101, 49, 3, 9, 114, 101, 115, 111, 117, 114, 99, 101, 50, 4, 0, 4, 4, 0, 8, 100, 111, 45, 115, 116, 117, 102, 102, 1, 6, 4, 1, 40, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 98, 117, 103, 45, 114, 101, 112, 111, 114, 116, 47, 114, 101, 115, 111, 117, 114, 99, 101, 50, 45, 105, 110, 116, 101, 114, 102, 97, 99, 101, 5, 2, 4, 1, 28, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 98, 117, 103, 45, 114, 101, 112, 111, 114, 116, 47, 101, 120, 97, 109, 112, 108, 101, 4, 0, 11, 13, 1, 0, 7, 101, 120, 97, 109, 112, 108, 101, 3, 4, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
